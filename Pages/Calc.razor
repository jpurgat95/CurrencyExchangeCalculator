@page "/"
@inject IHttpClientFactory _clientFactory
@inject ApplicationDbContext _context

<div class="header-container">
    <h1 class="header-title">
        KALKULATOR WYMIANY WALUT
    </h1>
</div>

<div class="currency-converter">
    <div class="icon-container">
        <i class="fas fa-calculator icon-style" aria-hidden="true"></i>
    </div>


    <div class="currency-row">
        <RadzenDropDown @bind-Value="value" Data="@currenciesNames" Placeholder="Wybierz walutę do wymiany" />
        <RadzenDropDown @bind-Value="value2" Data="@currenciesNames" Placeholder="Wybierz walutę docelową" />
    </div>

    <div>
        <label class="amount-label" for="amountInput">Ilość</label>
        <RadzenNumeric id="amountInput" @bind-Value="value3" Min="0" Style="width: 100%" Placeholder="Kwota do wymiany" />
    </div>

    <div class="button-container">
        <RadzenButton class="radzen-button" Text="Oblicz" Click="Calculate" />
    </div>

    <div class="result">
        Wynik: @FormatNumber(result) @targetCurrencyCode
    </div>
</div>

@code {
    string value = null;
    string value2 = null;
    double value3 = 1.00;
    double result = 0.00;
    IEnumerable<string> currenciesNames;
    DayRate rateEx;
    string targetCurrencyCode = "";

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        var clientRate = _clientFactory.CreateClient("nbp");
        var rateExList = await clientRate.GetFromJsonAsync<List<DayRate>>("");
        rateEx = rateExList.First();
        currenciesNames = rateEx.rates.Select(c => c.currency).Distinct();
    }

    string FormatNumber(double number) => number.ToString("0.00");

    void Calculate()
    {
        if (string.IsNullOrEmpty(value) || string.IsNullOrEmpty(value2))
        {
            result = 0.00;
            targetCurrencyCode = "";
            return;
        }

        var chosenCurrency = rateEx.rates.FirstOrDefault(c => c.currency == value);
        var buyingCurrency = rateEx.rates.FirstOrDefault(c => c.currency == value2);

        if (chosenCurrency == null || buyingCurrency == null)
        {
            result = 0.00;
            targetCurrencyCode = "";
            return;
        }

        result = (chosenCurrency.mid / buyingCurrency.mid) * value3;
        targetCurrencyCode = buyingCurrency.code;
    }

    public class DayRate
    {
        public string No { get; set; }
        public DateTime EffectiveDate { get; set; }
        public List<Rate> rates { get; set; }
    }

    public class Rate
    {
        public string currency { get; set; }
        public string code { get; set; }
        public double mid { get; set; }
    }
}
