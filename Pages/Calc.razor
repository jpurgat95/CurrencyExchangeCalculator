@page "/";
@inject IHttpClientFactory _clientFactory
@inject ApplicationDbContext _context

<div class="container-fluid" style="background-color: #008000; border-radius: 8px; padding-bottom:595px">
    <div class="d-flex align-items-center justify-content-center mb-3" style="padding-top: 20px">
        <div>
            <RadzenLabel Text="You have:" Component="DropDownChangeEvent" Style="width: 100px; text-align: center; margin-right: 8px; margin-bottom: 4px; vertical-align: middle; color: goldenrod; background-color: #444; border-radius: 8px; padding: 4px;" />
        </div>
        <div>
            <RadzenDropDown TValue="string" Value=@value Data=@currenciesNames Change="@(args => value = $"{args}")" Style="max-width: 300px; border-radius: 8px; border-color:darkgoldenrod; padding: 4px; text-align: center; line-height: 22px; height: 32px;" Name="DropDownChangeEvent" />
        </div>
    </div>

    <div class="d-flex align-items-center justify-content-center mb-3" >
        <div>
            <RadzenLabel Text="You buy:" Component="DropDownChangeEvent" Style="width: 100px; text-align: center; margin-right: 8px; margin-bottom: 4px; vertical-align: middle; color: goldenrod; background-color: #444; border-radius: 8px; padding: 4px;" />
        </div>
        <div>
            <RadzenDropDown TValue="string" Value=@value2 Data=@currenciesNames Change="@(args => value2 = $"{args}")" Style="max-width: 300px; border-radius: 8px; border-color:darkgoldenrod; padding: 4px; text-align: center; line-height: 22px; height: 32px;" Name="DropDownChangeEvent" />
        </div>
    </div>

    <div class="d-flex align-items-center justify-content-center mb-3">
        <div>
            <RadzenLabel Text="Amount:" Component="DropDownChangeEvent" Style="width: 100px; text-align: center; margin-right: 8px; margin-bottom: 4px; vertical-align: middle; color: goldenrod; background-color: #444; border-radius: 8px; padding: 4px;" />
        </div>
        <div>
            <RadzenNumeric TValue="double" Format="0.00" @bind-Value=@value3 Step="0.01" InputAttributes="@(new Dictionary<string,object>(){ { "aria-label", "enter value" }})" Style="width:204px; border-radius: 8px; border-color:darkgoldenrod; padding: 4px; text-align: center; line-height: 22px; height: 32px;" Name="DropDownChangeEvent" />
        </div>
    </div>

    <div class="d-flex align-items-center justify-content-center mb-3">
        <div>
            <RadzenButton Text="Calculate" Click="@Calculate" Style="width: 312px; margin-right: 8px; margin-left: 8px; margin-bottom: 4px; vertical-align: middle; color: whitesmoke; background-color: darkgoldenrod; border-radius: 8px; padding: 4px;" />
        </div>
    </div>

    <div class="d-flex align-items-center justify-content-center mb-3">
        <div>
            <RadzenLabel Text="Result:" Component="DropDownChangeEvent" Style="width: 100px; text-align: center; margin-right: 8px; vertical-align: middle; color: goldenrod; background-color: #444; border-radius: 8px; padding: 4px;" />
        </div>
        <div>
            <RadzenTextBox Value="@FormatNumber(result)" ReadOnly="true" Style="max-width: 300px; border-radius: 8px; border-color:darkgoldenrod; padding: 4px; text-align: center; line-height: 22px; height: 32px;" />
        </div>
    </div>
</div>



@code {
    string value = "Choose currency";
    string value2 = "Choose currency";
    double value3 = 1.00;
    double result = 0.00;
    IEnumerable<string> currenciesNames;
    // IEnumerable<string> currenciesNames2;
    public List<DayRate> CurrenciesList = new List<DayRate>();
    DayRate rateEx;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        var clientRate = _clientFactory.CreateClient("nbp");
        var rateExList = await clientRate.GetFromJsonAsync<List<DayRate>>("");
        rateEx = rateExList.First();

        currenciesNames = rateEx.rates.Select(c => c.currency).Distinct(); 
        // currenciesNames2 = rateEx.rates.Select(c => c.currency).Distinct();
    }

    string FormatNumber(double number)
    {
        return number.ToString("0.00");
    }
    void Calculate()
    {
        var chosenCurrencyValue = rateEx.rates.FirstOrDefault(c => c.currency == value).mid;
        var buyingCurrencyValue = rateEx.rates.FirstOrDefault(c => c.currency == value2).mid;

        result = (chosenCurrencyValue / buyingCurrencyValue) * value3;
    }
}
