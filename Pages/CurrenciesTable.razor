@page "/currenciestable"
@inject IHttpClientFactory _clientFactory
@inject ApplicationDbContext _context

<h1 class="header-title">Kursy wymiany walut NBP</h1>

@if (!string.IsNullOrWhiteSpace(errorStringRate))
{
    <div class="h2 text-danger">@errorStringRate</div>
}
else if (rateEx is null)
{
    <h1 class="header-title">Ładowanie...</h1>
}
else
{
    <table class="table table-striped">
        <thead class="thead-dark">
            <tr>
                <th>Waluta</th>
                <th>Kod Waluty</th>
                <th>Kurs wymiany walut (na PLN)</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var x in rateEx.rates)
            {
                <tr>
                    <td>@x.currency</td>
                    <td>@x.code</td>
                    <td>@x.mid</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    DayRate rateEx;
    string errorStringRate;

    public async Task SaveDataToDb()
    {
        var clientRate = _clientFactory.CreateClient("nbp");

        try
        {
            var rateExList = await clientRate.GetFromJsonAsync<List<DayRate>>("https://api.nbp.pl/api/exchangerates/tables/A/?format=json");
            rateEx = rateExList.First();

            foreach (var item in rateEx.rates)
            {
                _context.Currencies.Add(new CurrencyExchangeRate
                {
                    CurrencyName = item.currency,
                    CurrenyCode = item.code,
                    Rate = item.mid,
                    Date = rateEx.effectiveDate
                });
            }

            await _context.SaveChangesAsync();
            errorStringRate = null;
        }
        catch (Exception exRate)
        {
            errorStringRate = $"Błąd: {exRate.Message}";
        }
    }

    public async Task ClearDb()
    {
        var allRecords = await _context.Currencies.ToListAsync();
        _context.Currencies.RemoveRange(allRecords);
        await _context.SaveChangesAsync();
    }

    protected override async Task OnInitializedAsync()
    {
        var clientRate = _clientFactory.CreateClient("nbp");

        try
        {
            var rateExList = await clientRate.GetFromJsonAsync<List<DayRate>>("https://api.nbp.pl/api/exchangerates/tables/A/?format=json");
            rateEx = rateExList.First();
            errorStringRate = null;

            var lastRateDate = _context.Currencies.OrderByDescending(c => c.Date).Select(c => c.Date).FirstOrDefault();

            if (lastRateDate.Date != rateEx.effectiveDate.Date)
            {
                await ClearDb(); // wyczyść stare dane
                await SaveDataToDb();
            }
        }
        catch (Exception exRate)
        {
            errorStringRate = $"Błąd podczas pobierania danych: {exRate.Message}";
        }
    }

    // MODELE

    public class Rate
    {
        public string currency { get; set; }
        public string code { get; set; }
        public decimal mid { get; set; }
    }

    public class DayRate
    {
        public string table { get; set; }
        public string no { get; set; }
        public DateTime effectiveDate { get; set; }
        public List<Rate> rates { get; set; }
    }
}
