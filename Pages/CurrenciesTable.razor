@page "/currenciestable"
@inject IHttpClientFactory _clientFactory
@inject ApplicationDbContext _context

<h3>Rate NBP</h3>

@if (string.IsNullOrWhiteSpace(errorStringRate) == false)
{
    <div class="h2">@errorStringRate</div>
}
else if (rateEx is null)
{
    <div class="h4">Loading...</div>
}
else
{
    <table class="table table-striped">
        <thead class="thead dark">
            <tr>
                <th>Currency</th>
                <th>Currency Code</th>
                <th>Currency Medium Value</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var x in rateEx.rates)
            {
                <tr>
                    <td>@x.currency</td>
                    <td>@x.code</td>
                    <td>@x.mid</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    DayRate rateEx;
    string errorStringRate;

    public async Task SaveDataToDb()
    {
        DayRate rateEx;
        string errorStringRate;
        var clientRate = _clientFactory.CreateClient("nbp");

        try
        {
            var rateExList = await clientRate.GetFromJsonAsync<List<DayRate>>("");
            rateEx = rateExList.First();
            foreach (var item in rateEx.rates)
            {
                _context.Currencies.Add(new CurrencyExchangeRate()
                    {
                        CurrencyName = item.currency,
                        CurrenyCode = item.code,
                        Rate = item.mid,
                        Date = DateTime.Today,
                    });
            }
            _context.SaveChanges();

            errorStringRate = null;
        }
        catch (Exception exRate)
        {
            errorStringRate = $"Error hehe: {exRate.Message}";
        }
    }

    //clear database - commented out until it's needed
    // public async Task ClearDb()
    // {
    //     var allRecords = await _context.Currencies.ToListAsync();
    //     _context.Currencies.RemoveRange(allRecords);
    //     await _context.SaveChangesAsync();
    // }

    protected override async Task OnInitializedAsync()
    {
        //fetching data from nbp api
        var clientRate = _clientFactory.CreateClient("nbp");

        try
        {
            var rateExList = await clientRate.GetFromJsonAsync<List<DayRate>>("");
            rateEx = rateExList.First();
            errorStringRate = null;

            //check if there is any data in database
            if (!_context.Currencies.Any())
            {
                await SaveDataToDb();
            }
            else
            {
                //date from data base formating to compare
                var datesFromDatabse = _context.Currencies.Select(c => c.Date).ToList();

                var actualDateFromDatabase = datesFromDatabse.Last();
                var dayOfYearFromDataBase = actualDateFromDatabase.DayOfYear;
                var yearFromDataBase = actualDateFromDatabase.Year;

                //actual date formating to compare
                DateTime currentDate = DateTime.Now;
                var currentDayOfYear = currentDate.DayOfYear;
                var currentYear = currentDate.Year;

                //comparing date from db and actual date, if they are different it adds them to db
                if (yearFromDataBase != currentYear)
                {
                    await SaveDataToDb();
                }
                else if (dayOfYearFromDataBase != currentDayOfYear)
                {
                    await SaveDataToDb();
                }
            }
        }
        catch (Exception exRate)
        {
            errorStringRate = $"Error hehe: {exRate.Message}";
        }       
    }
}
